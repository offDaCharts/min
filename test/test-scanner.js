var should = require('should');
var scan = require('../scanner')
var error = require('../error')
var i = require('util').inspect

describe('The scanner', function () {

  it('correctly tokenizes hello world program', function (done) {
    scan('test/data/workingPrograms/helloWorld.min', function (tokens) {
      tokens.length.should.equal(3)
      i(tokens[0]).should.equal(i({kind:'`',lexeme:'`',line:1,col:1}))
      i(tokens[1]).should.equal(i({kind:'STRLIT',lexeme:'"Hello World"',line:1,col:2}))
      i(tokens[2]).should.equal(i({kind:'EOF',lexeme:'EOF'}))
      done()
    })
  })

  it('correctly tokenizes numeric and string literals', function (done) {
    scan('test/data/symbols/literals.min', function (tokens) {
      tokens.length.should.equal(5)
      i(tokens[0]).should.equal(i({ kind: 'NUMLIT', lexeme: '34.567', line: 1, col: 1 }))
      i(tokens[1]).should.equal(i({ kind: 'STRLIT', lexeme: '"This is a sentence."', line: 1, col: 7 }))
      i(tokens[2]).should.equal(i({ kind: 'NUMLIT', lexeme: '9240.4345', line: 1, col: 28 }))
      i(tokens[3]).should.equal(i({ kind: 'STRLIT', lexeme: '"wordswordswords"', line: 1, col: 37 }))
      i(tokens[4]).should.equal(i({kind:'EOF',lexeme:'EOF'}))
      done()
    })
  })

  it('declares variables and skips empty lines', function (done) {
    scan('test/data/workingPrograms/declareVars.min', function (tokens) {
      tokens.length.should.equal(13)
      i(tokens[0]).should.equal(i({kind:'#',lexeme:'#',line:1,col:1}))
      i(tokens[1]).should.equal(i({kind:'ID',lexeme:'num',line:1,col:2}))
      i(tokens[2]).should.equal(i({kind:'=',lexeme:'=',line:1,col:5}))
      i(tokens[3]).should.equal(i({kind:'NUMLIT',lexeme:'34',line:1,col:6}))
      i(tokens[4]).should.equal(i({kind:'#',lexeme:'#',line:2,col:1}))
      i(tokens[5]).should.equal(i({kind:'ID',lexeme:'n',line:2,col:2}))
      i(tokens[6]).should.equal(i({kind:'=',lexeme:'=',line:2,col:3}))
      i(tokens[7]).should.equal(i({kind:'NUMLIT',lexeme:'2',line:2,col:4}))
      i(tokens[8]).should.equal(i({kind:'$',lexeme:'$',line:4,col:1}))
      i(tokens[9]).should.equal(i({kind:'ID',lexeme:'s',line:4,col:2}))
      i(tokens[10]).should.equal(i({kind:'=',lexeme:'=',line:4,col:3}))
      i(tokens[11]).should.equal(i({kind:'STRLIT',lexeme:'"string"',line:4,col:4}))
      i(tokens[12]).should.equal(i({kind:'EOF',lexeme:'EOF'}))
      done()
    })
  })

  it('recognizes all two characters operators', function (done) {
    scan('test/data/symbols/twoCharOperators.min', function (tokens) {
      tokens.length.should.equal(8)
      i(tokens[0]).should.equal(i({ kind: '<~', lexeme: '<~', line: 1, col: 1 }))
      i(tokens[1]).should.equal(i({ kind: '>~', lexeme: '>~', line: 1, col: 3 }))
      i(tokens[2]).should.equal(i({ kind: '\'~', lexeme: '\'~', line: 1, col: 5 }))
      i(tokens[3]).should.equal(i({ kind: '+=', lexeme: '+=', line: 1, col: 7 }))
      i(tokens[4]).should.equal(i({ kind: '-=', lexeme: '-=', line: 1, col: 9 }))
      i(tokens[5]).should.equal(i({ kind: '*=', lexeme: '*=', line: 1, col: 11 }))
      i(tokens[6]).should.equal(i({ kind: '/=', lexeme: '/=', line: 1, col: 13 }))
      i(tokens[7]).should.equal(i({kind:'EOF',lexeme:'EOF'}))
      done()
    })
  })

  it('recognizes all reserved characters', function (done) {
    scan('test/data/symbols/reservedCharacters.min', function (tokens) {
      tokens.length.should.equal(31)
      i(tokens[0]).should.equal(i({ kind: '#', lexeme: '#', line: 1, col: 1 }))
      i(tokens[1]).should.equal(i({ kind: '$', lexeme: '$', line: 1, col: 2 }))
      i(tokens[2]).should.equal(i({ kind: '_', lexeme: '_', line: 1, col: 3 }))
      i(tokens[3]).should.equal(i({ kind: ';', lexeme: ';', line: 1, col: 4 }))
      i(tokens[4]).should.equal(i({ kind: '*', lexeme: '*', line: 1, col: 5 }))
      i(tokens[5]).should.equal(i({ kind: '^', lexeme: '^', line: 1, col: 6 }))
      i(tokens[6]).should.equal(i({ kind: '-', lexeme: '-', line: 1, col: 7 }))
      i(tokens[7]).should.equal(i({ kind: '+', lexeme: '+', line: 1, col: 8 }))
      i(tokens[8]).should.equal(i({ kind: '/', lexeme: '/', line: 1, col: 9 }))
      i(tokens[9]).should.equal(i({ kind: '!', lexeme: '!', line: 1, col: 10 }))
      i(tokens[10]).should.equal(i({ kind: '&', lexeme: '&', line: 1, col: 11 }))
      i(tokens[11]).should.equal(i({ kind: '|', lexeme: '|', line: 1, col: 12 }))
      i(tokens[12]).should.equal(i({ kind: ' ', lexeme: ' ', line: 1, col: 13 }))
      i(tokens[13]).should.equal(i({ kind: '<', lexeme: '<', line: 1, col: 14 }))
      i(tokens[14]).should.equal(i({ kind: '>', lexeme: '>', line: 1, col: 15 }))
      i(tokens[15]).should.equal(i({ kind: '?', lexeme: '?', line: 1, col: 16 }))
      i(tokens[16]).should.equal(i({ kind: ':', lexeme: ':', line: 1, col: 17 }))
      i(tokens[17]).should.equal(i({ kind: '%', lexeme: '%', line: 1, col: 18 }))
      i(tokens[18]).should.equal(i({ kind: '@', lexeme: '@', line: 1, col: 19 }))
      i(tokens[19]).should.equal(i({ kind: '=', lexeme: '=', line: 1, col: 20 }))
      i(tokens[20]).should.equal(i({ kind: '`', lexeme: '`', line: 1, col: 21 }))
      i(tokens[21]).should.equal(i({ kind: ',', lexeme: ',', line: 1, col: 22 }))
      i(tokens[22]).should.equal(i({ kind: '(', lexeme: '(', line: 1, col: 23 }))
      i(tokens[23]).should.equal(i({ kind: ')', lexeme: ')', line: 1, col: 24 }))
      i(tokens[24]).should.equal(i({ kind: '[', lexeme: '[', line: 1, col: 25 }))
      i(tokens[25]).should.equal(i({ kind: ']', lexeme: ']', line: 1, col: 26 }))
      i(tokens[26]).should.equal(i({ kind: '{', lexeme: '{', line: 1, col: 27 }))
      i(tokens[27]).should.equal(i({ kind: '}', lexeme: '}', line: 1, col: 28 }))
      i(tokens[28]).should.equal(i({ kind: '~', lexeme: '~', line: 1, col: 29 }))
      i(tokens[29]).should.equal(i({ kind: '\'', lexeme: '\'', line: 1, col: 30 }))
      i(tokens[30]).should.equal(i({kind:'EOF',lexeme:'EOF'}))
      done()
    })
  })
  
  it('recognizes indented blocks in conditionals and loops', function (done) {
    scan('test/data/workingPrograms/indentedBlocks.min', function (tokens) {
      tokens.length.should.equal(29)
      i(tokens[0]).should.equal(i({ kind: '?', lexeme: '?', line: 1, col: 1 }))
      i(tokens[1]).should.equal(i({ kind: 'ID', lexeme: 'a', line: 1, col: 2 }))
      i(tokens[2]).should.equal(i({ kind: '>', lexeme: '>', line: 1, col: 3 }))
      i(tokens[3]).should.equal(i({ kind: 'ID', lexeme: 'b', line: 1, col: 4 }))
      i(tokens[4]).should.equal(i({ kind: 'INDENT', lexeme: 'INDENT', line: 2, col: 1 }))
      i(tokens[5]).should.equal(i({ kind: '`', lexeme: '`', line: 2, col: 5 }))
      i(tokens[6]).should.equal(i({ kind: 'STRLIT', lexeme: '"hello world"', line: 2, col: 6 }))
      i(tokens[7]).should.equal(i({ kind: 'DEDENT', lexeme: 'DEDENT', line: 3, col: 1 }))
      i(tokens[8]).should.equal(i({ kind: ':', lexeme: ':', line: 3, col: 1 }))
      i(tokens[9]).should.equal(i({ kind: 'INDENT', lexeme: 'INDENT', line: 4, col: 1 }))
      i(tokens[10]).should.equal(i({ kind: '@', lexeme: '@', line: 4, col: 5 }))
      i(tokens[11]).should.equal(i({ kind: '#', lexeme: '#', line: 4, col: 6 }))
      i(tokens[12]).should.equal(i({ kind: 'ID', lexeme: 'i', line: 4, col: 7 }))
      i(tokens[13]).should.equal(i({ kind: '=', lexeme: '=', line: 4, col: 8 }))
      i(tokens[14]).should.equal(i({ kind: 'NUMLIT', lexeme: '0', line: 4, col: 9 }))
      i(tokens[15]).should.equal(i({ kind: ',', lexeme: ',', line: 4, col: 10 }))
      i(tokens[16]).should.equal(i({ kind: 'ID', lexeme: 'i', line: 4, col: 11 }))
      i(tokens[17]).should.equal(i({ kind: '<', lexeme: '<', line: 4, col: 12 }))
      i(tokens[18]).should.equal(i({ kind: 'NUMLIT', lexeme: '5', line: 4, col: 13 }))
      i(tokens[19]).should.equal(i({ kind: ',', lexeme: ',', line: 4, col: 14 }))
      i(tokens[20]).should.equal(i({ kind: 'ID', lexeme: 'i', line: 4, col: 15 }))
      i(tokens[21]).should.equal(i({ kind: '+=', lexeme: '+=', line: 4, col: 16 }))
      i(tokens[22]).should.equal(i({ kind: 'NUMLIT', lexeme: '1', line: 4, col: 18 }))
      i(tokens[23]).should.equal(i({ kind: 'INDENT', lexeme: 'INDENT', line: 5, col: 1 }))
      i(tokens[24]).should.equal(i({ kind: '`', lexeme: '`', line: 5, col: 9 }))
      i(tokens[25]).should.equal(i({ kind: 'STRLIT', lexeme: '"hello 5 times"', line: 5, col: 10 }))
      i(tokens[26]).should.equal(i({ kind: 'DEDENT', lexeme: 'DEDENT' }))
      i(tokens[27]).should.equal(i({ kind: 'DEDENT', lexeme: 'DEDENT' }))
      i(tokens[28]).should.equal(i({ kind: 'EOF', lexeme: 'EOF' }))
      done()
    })
  })

  it('detects illegal characters', function (done) {
    scan('test/data/errors/test.min', function () {
      error.count.should.equal(3)
      done()
    })
  })
})
